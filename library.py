import telebot.types

from seminars import *


# –æ–ø–æ—Ä–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def get_nearest_id(min_t):
    x = t
    for i in x.keys():
        time_i = x[i]['s']
        if min_t < time_i:
            return i


# –æ—Ç–≤–µ—Ç—ã –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã
def now():
    x = time.localtime()
    year, month, day, hour, min_t = x.tm_year, x.tm_mon, x.tm_mday, x.tm_hour, x.tm_min
    min_t += hour * 60 + day * 24 * 60 - 24 * 24 * 60
    a = ''
    for i in t.keys():
        if t[i]['s'] <= min_t <= t[i]['e']:
            a += t[i]['name']
    if a == '' or year != 2021 or month != 12:
        a = '–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π\n\n'
    a = '–°–µ–π—á–∞—Å:\n' + a + '–î–∞–ª–µ–µ:'
    return a


def nearest(message):
    now_is = now()
    x = time.localtime()
    year, month, day, hour, min_t = x.tm_year, x.tm_mon, x.tm_mday, x.tm_hour, x.tm_min
    min_t += hour * 60 + day * 24 * 60 - 24 * 24 * 60
    x = t
    near = '—Ä–æ–∂–¥–µ—Å—Ç–≤–µ–Ω—Å–∫–∏–π –≤—ã–µ–∑–¥ –µ—â–µ –Ω–µ —Å–∫–æ—Ä–æ\n—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ–µ—Ç –µ—â–µ –ø–æ–º–µ–Ω—è—Ç—å—Å—è\n\n/menu\n/child'
    if year == 2021 and month == 12:
        i = get_nearest_id(min_t)
        near = x[i]
        tim = near['s']
        near = ''
        for j in x.keys():
            ne = x[j]
            if tim == x[j]['s']:
                near = near + '\n' +  ne['name'] + '\n' + ne['wd'] + ' ' + ne['t'] + '\n\n'

    near = '–í–æ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∏ —Å–∞–º—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ:\n' + now_is + '\n' + near
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–ú–µ–Ω—é',
            callback_data='menu'
        )
    )
    bot.send_message(
        message.chat.id,
        near,
        reply_markup=keyboard
    )


def future(message):
    bot.send_photo(
        message.chat.id,
        menu_photo_id
    )
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–î–∞!',
            callback_data='menu'
        )
    )
    bot.send_message(
        message.chat.id,
        '–•–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é?',
        reply_markup=keyboard
    )


def resurses(message):
    bot.send_message(
        message.chat.id,
        '–≤—Å—è–∫–∏–µ —Å—Å—ã–ª–∫–∏\n/menu'
    )
    delete(message)


def seminars(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–ü—è—Ç–Ω–∏—Ü–∞ 17 : 30',
            callback_data='friday1730'
        )
    )
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–ü—è—Ç–Ω–∏—Ü–∞ 18 : 00',
            callback_data='friday1800'
        )
    )
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–°—É–±–±–æ—Ç–∞ 18 : 00',
            callback_data='satarday1800'
        )
    )
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–ù–∞–∑–∞–¥',
            callback_data='menu'
        )
    )
    bot.send_message(
        message.chat.id,
        '–í—ã–±–µ—Ä–µ—Ç–µ —Å–µ–º–∏–Ω–∞—Ä –¥–ª—è –ø–æ–ª—Å–µ—à–µ–Ω–∏—è',
        reply_markup=keyboard
    )


def game_rules(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–ò–≥—Ä–∞—Ç—å',
            callback_data='game'
        ),
        telebot.types.InlineKeyboardButton(
            '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É',
            callback_data='menu'
        )
    )
    x = '–í–∞–º –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ –¥–ª—è –∏–≥—Ä—ã, —Å–µ—Å—Ç—å –≤ —Å–ø–æ–∫–æ–π–Ω–æ–º –º–µ—Å—Ç–µ –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –æ–±—â–µ–Ω–∏–µ–ºüëåüèª\n\n–ü—Ä–∞–≤–∏–ª–∞: –ò–≥—Ä–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "—Å–ø—Ä–æ—Å–∏ - —É–∑–Ω–∞–µ—à—å". –í—ã —Å–∞–¥–∏—Ç–µ—Å—å –≤ –∫—Ä—É–≥ –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –¥—Ä—É–≥ –¥—Ä—É–≥—É, –∫–∞–∂–¥—ã–π —Å–ª–µ–¥—É—é—â–∏–π —á–µ–ª–æ–≤–µ–∫ –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É "—Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å" –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –¥—Ä—É–≥–∏–µ –∏–≥—Ä–æ–∫–∏ –ø—Ä–∏–º—É—Ç –æ—Ç–≤–µ—Ç, –∏ –ø–æ—Å—á–∏—Ç–∞—é—Ç –µ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É'
    bot.send_message(
        message.chat.id,
        x,
        reply_markup=keyboard
    )


def game(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–ó–∞–∫–æ–Ω—á–∏—Ç—å –∏–≥—Ä—É',
            callback_data='menu'
        ),
        telebot.types.InlineKeyboardButton(
            '–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å',
            callback_data='game'
        )
    )
    l = gq.keys()
    a = random.randint(min(l), max(l))
    print(a, end = ' ')
    a = gq[a]
    print(a)
    bot.send_message(
        message.chat.id,
        a,
        reply_markup=keyboard
    )


# —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def delete(message):
    pass


def check(message):
    if not message.from_user.username in us.keys():
        us[message.from_user.id] = {
            'name': message.from_user.first_name,
            'surname': message.from_user.last_name,
            'chat_id': message.chat.id,
            'username': message.from_user.username
        }


def typing(message, delay):
    if message and delay:
        bot.send_chat_action(
            message.chat.id,
            'typing'
        )
        time.sleep(delay)


# —Ä–∞–±–æ—Ç–∞ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
def question(message):
    bot.send_message(
        message.chat.id,
        '–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å\n/menu'
    )
    delete(message)


def message_with_odobralka(message):
    keyboard = telebot.types.InlineKeyboardMarkup()
    keyboard.row(
        telebot.types.InlineKeyboardButton(
            '–û–¥–æ–±—Ä–∏—Ç—å',
            callback_data='good'
        ),
        telebot.types.InlineKeyboardButton(
            '–ù–µ –æ–¥–æ–±—Ä—è—Ç—å',
            callback_data='bad'
        ),

    )
    bot.send_message(
        odobralka_chat,
        f'@{message.from_user.username} {message.text}',
        reply_markup=keyboard
    )
    bot.send_message(
        slak_chat,
        'Qwestion: \n' + str(message.from_user.last_name)  + '  ' + str(message.from_user.first_name) + '\n' + str(message.from_user.username) + '\n' + str(message.from_user.language_code) + '\n' + str(message.from_user.id) + '\n\n' + str(message.text)
    )


def good(message):
    text_message = str(message.text)
    i = text_message.find(' ')
    text_message = text_message[i + 1:]
    bot.send_message(
        talk_chat,
        text_message
    )
    bot.delete_message(message.chat.id, message.id)
    time.sleep(4)


def bad(message):
    bot.delete_message(message.chat.id, message.id)
